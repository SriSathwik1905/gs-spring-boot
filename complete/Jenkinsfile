pipeline {
    agent any // Run on any available agent/node (our Jenkins master in this case)

    tools {
        maven 'Maven 3.9.9'       // Match name in Jenkins tool config
        jdk 'OpenJDK 17'          // Match name in Jenkins tool config
    }

    environment {
        DOCKER_HUB_USERNAME     = "srisathwik195"
        APP_NAME                = "sample-java-app"
        DOCKER_IMAGE            = "${DOCKER_HUB_USERNAME}/${APP_NAME}:${BUILD_NUMBER}"

        AWS_REGION              = readFile('/tmp/tf_outputs/region.txt').trim()
        EKS_CLUSTER_NAME        = readFile('/tmp/tf_outputs/eks_cluster_name.txt').trim()
        KUBECONFIG_PATH         = "/var/lib/jenkins/.kube/config-${EKS_CLUSTER_NAME}"

        AWS_CREDENTIALS_ID      = 'aws-creds'
        DOCKER_CREDENTIALS_ID   = 'docker-hub-creds'

        K8S_DEPLOYMENT_NAME     = 'sample-app-deployment'
        K8S_CONTAINER_NAME      = 'sample-container'
    }

    stages {
        stage('Preparation') {
            steps {
                cleanWs()
                sh '''
                  echo "--- Preparation ---"
                  if [ ! -f /tmp/tf_outputs/region.txt ] || [ ! -f /tmp/tf_outputs/eks_cluster_name.txt ]; then
                    echo "ERROR: Terraform output files not found!"
                    exit 1
                  fi
                  echo "AWS Region: ${AWS_REGION}"
                  echo "EKS Cluster Name: ${EKS_CLUSTER_NAME}"
                  echo "Docker Image: ${DOCKER_IMAGE}"
                  echo "Using AWS Credentials ID: ${AWS_CREDENTIALS_ID}"
                  echo "Using Docker Hub Credentials ID: ${DOCKER_CREDENTIALS_ID}"
                  echo "-------------------"
                '''
            }
        }

        stage('Checkout Code') {
            steps {
                echo "Checking out code from GitHub..."
                git url: 'https://github.com/SriSathwik1905/gs-spring-boot',
                    branch: 'main'
                dir('complete') {
                    stash includes: '**/*', name: 'source'
                }
            }
        }

        stage('Build with Maven') {
            steps {
                dir('complete') {
                    unstash 'source'
                    echo "Building with Maven..."
                    sh "mvn clean package -DskipTests"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('complete') {
                    unstash 'source'
                    echo "Building Docker image: ${DOCKER_IMAGE}"
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                dir('complete') {
                    echo "Pushing Docker image to Docker Hub..."
                    withDockerRegistry(credentialsId: DOCKER_CREDENTIALS_ID, url: 'https://index.docker.io/v1/') {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Configure Kubectl') {
            steps {
                echo "Configuring kubectl..."
                withCredentials([aws(credentialsId: AWS_CREDENTIALS_ID)]) {
                    sh '''
                      mkdir -p $(dirname ${KUBECONFIG_PATH})
                      aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION} --kubeconfig ${KUBECONFIG_PATH}
                      echo "kubectl configured. Verifying..."
                      KUBECONFIG=${KUBECONFIG_PATH} kubectl get nodes
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                dir('complete') {
                    echo "Deploying image to Kubernetes..."
                    sh "KUBECONFIG=${KUBECONFIG_PATH} kubectl set image deployment/${K8S_DEPLOYMENT_NAME} ${K8S_CONTAINER_NAME}=${DOCKER_IMAGE} --record"
                    echo "Waiting for rollout to complete..."
                    sh "KUBECONFIG=${KUBECONFIG_PATH} kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} --timeout=5m"
                    echo "Deployment update completed."
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished. Cleaning up..."
            cleanWs()
            sh "rm -f ${KUBECONFIG_PATH}"
        }
    }
}
